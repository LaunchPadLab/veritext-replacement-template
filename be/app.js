import express from 'express'
import path from 'path'
import enforceSSL from 'express-enforces-ssl'
import { createProxyMiddleware } from 'http-proxy-middleware'
import compression from 'compression'
import exposeEnvMiddleware from 'expose-env-middleware'
import { loadEnv, loadPublicEnv } from '../fe/config/env.js'
import morgan from 'morgan'
import { logger, stream } from './src/utils/logger.js'
import cors from 'cors'
import cookieParser from 'cookie-parser'
import { ErrorMiddleware } from './src/middlewares/error.middleware.js'
import swaggerJSDoc from 'swagger-jsdoc'
import swaggerUi from 'swagger-ui-express'
import url from 'url'

loadEnv()

export class App {
  // add routes as a parameter
  constructor(routes) {
    const {
      BASE_PATH,
      CREDENTIALS,
      LOG_FORMAT,
      NODE_ENV,
      ORIGIN,
      PORT,
      PROXY_ENFORCE,
      PROXIED_API_URL,
      PROXIED_API_TOKEN,
      SERVER_STATIC_BUILD,
      SWAGGER_ENDPOINT,
      SWAGGER_SERVER_URL,
    } = process.env

    this.app = express()
    this.BASE_PATH = BASE_PATH
    this.CREDENTIALS = CREDENTIALS
    this.LOG_FORMAT = LOG_FORMAT
    this.NODE_ENV = NODE_ENV
    this.ORIGIN = ORIGIN
    this.PORT = PORT
    this.PROXY_ENFORCE = PROXY_ENFORCE
    this.PROXIED_API_URL = PROXIED_API_URL
    this.PROXIED_API_TOKEN = PROXIED_API_TOKEN
    this.SERVER_STATIC_BUILD = SERVER_STATIC_BUILD
    this.SWAGGER_ENDPOINT = SWAGGER_ENDPOINT
    this.SWAGGER_SERVER_URL = SWAGGER_SERVER_URL

    this.initializeMiddlewares()
    this.initializeRoutes(routes)
    this.initializeProxy()
    this.initializeFrontend()
    this.initializeSwagger()
    this.initializeErrorHandling()
  }

  listen() {
    this.app.listen(this.PORT, () => {
      logger.info(`=================================`)
      logger.info(`======= ENV: ${this.NODE_ENV} =======`)
      logger.info(`ðŸš€ App listening on the port ${this.PORT}`)
      logger.info(`=================================`)
    })
  }

  getServer() {
    return this.app
  }

  initializeFrontend() {
    // Use build folder for static files
    if (this.SERVER_STATIC_BUILD === 'true') {
      logger.info('serving static build')
      this.app.use(express.static('build'))
    }
    this.app.get('/env', exposeEnvMiddleware(loadPublicEnv))

    // TODO ADD ERROR HANDLING FOR UNKNOWN ROUTES
    const __dirname = url.fileURLToPath(new URL('.', import.meta.url))
    this.app.get('*', (req, res) =>
      res.sendFile(path.join(__dirname, '../', '/build/index.html'))
    )
  }

  initializeProxy() {
    const { PROXY_ENFORCE, PROXIED_API_URL, PROXIED_API_TOKEN } = this
    if (PROXY_ENFORCE === 'true') {
      logger.info('enforcing ssl')
      this.app.enable('trust proxy')
      this.app.disable('x-powered-by')
      this.app.use(enforceSSL())
    }

    // Proxy requests if proxy API url is provided
    if (PROXIED_API_URL !== '') {
      logger.info('created production proxy')
      this.app.use(
        '/proxy',
        createProxyMiddleware({
          target: PROXIED_API_URL,
          headers: { Authorization: `Bearer ${PROXIED_API_TOKEN}` },
          secure: true,
          changeOrigin: true,
          pathRewrite: {
            '^/proxy/': '/',
          },
        })
      )
    }
  }

  initializeMiddlewares() {
    const REJECTED_METHODS = ['TRACE']
    const { CREDENTIALS, LOG_FORMAT, ORIGIN } = this
    this.app.use((req, res, next) => {
      if (REJECTED_METHODS.includes(req.method)) return res.sendStatus(405)
      return next()
    })
    this.app.use(morgan(LOG_FORMAT, { stream }))
    this.app.use(cors({ origin: ORIGIN, credentials: CREDENTIALS }))
    // this.app.use(hpp());
    // this.app.use(helmet());
    this.app.use(compression())
    this.app.use(express.json())
    this.app.use(express.urlencoded({ extended: true }))
    this.app.use(cookieParser())
  }

  initializeRoutes(routes) {
    routes.forEach((route) => {
      this.app.use(this.BASE_PATH, route.router)
    })
  }

  initializeSwagger() {
    const swaggerPath = path.resolve('be', 'src', 'routes', '*')
    const options = {
      definition: {
        openapi: '3.0.0',
        info: {
          title: 'Veritext Express API',
          version: '1.0.0',
          description:
            'Veritet Express API with autogenerated swagger documentation',
          contact: {
            name: 'Launchpad Lab',
            url: 'https://launchpadlab.com/',
            email: 'support@launchpadlab.com',
          },
        },
        servers: [
          {
            url: this.SWAGGER_SERVER_URL,
            basepath: this.BASE_PATH,
          },
        ],
      },
      apis: [swaggerPath],
    }

    const specs = swaggerJSDoc(options)
    this.app.use(this.SWAGGER_ENDPOINT, swaggerUi.serve, swaggerUi.setup(specs))
  }

  initializeErrorHandling() {
    this.app.use(ErrorMiddleware)
  }
}
